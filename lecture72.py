'''
Iterables: An iterable is an object in Python that can be looped over using a for loop. 
It is a more general concept than a sequence (such as a list or a string), because it does not have to be ordered or indexed.
In order to be iterable, an object must implement the __iter__() method, which returns an iterator object. 
The iterator object is responsible for producing the next value in the sequence.
Examples of built-in Python iterables include lists, strings, dictionaries, sets, and tuples. In addition to these built-in types, it is possible to define your own iterables by implementing the __iter__() method.

Iterators: In Python, an iterator is an object that implements the iterator protocol, which consists of the __iter__() and __next__() methods.
The __iter__() method returns the iterator object itself, and the __next__() method returns the next value in the sequence. 
If there are no more values to return, the __next__() method should raise the StopIteration exception.
Iterators can be used to iterate over an iterable object, such as a list or a string. 
The iter() function is used to create an iterator from an iterable object, and the next() function is used to get the next value from the iterator.
Iterators are a fundamental part of Python's iteration protocol, and are used extensively throughout the language's built-in libraries and data structures.

Iterations:In Python, iteration is the process of repeatedly executing a block of code until a specific condition is met. 
An iterable object is an object that can be used as a source of elements for iteration.
Some common iterable objects in Python include lists, tuples, dictionaries, sets, and strings.
There are several ways to iterate over an iterable object in Python, including:
1. Using a for loop: The for loop is the most common way to iterate over an iterable object in Python.
2. Using the iter() function and a while loop: You can also use the iter() function to create an iterator from an iterable object, and then use a while loop and the next() function to iterate over the elements.
3. Using list comprehensions: List comprehensions provide a concise way to iterate over an iterable object and create a new list. 
Iterating over iterable objects is a fundamental part of programming in Python, and is used extensively throughout the language's built-in libraries and third-party modules.

Generators: In Python, a generator is a special type of function that allows you to generate a sequence of values on-the-fly, without needing to pre-generate and store the entire sequence in memory. 
Generators are useful when you need to iterate over a large sequence of values, or when you want to create a sequence of values based on some input data.
The basic syntax for creating a generator in Python is to use the yield keyword instead of return in a function. 
When a generator function is called, it returns a generator object that can be used to iterate over the values generated by the function.
'''

def gen(n):
    for i in range(n):
        yield i 


g = gen(3)
#print(g.__next__()) # will give first iterate that is 0
#print(g.__next__()) # will give second iterate that is 1
#print(g.__next__()) # will give third iterate that is 2
#print(g.__next__()) # will give error because there is no next iteration after 3 iteration

# we can even use the for loop to iterate over the values generated by the generator function
for i in g:
    print(i)

# string is iterable so we can iterate over it as

str = 'harry'
ier = iter(str) #The iter() method returns an iterator for the given argument.
for i in ier:
    print(i)


